// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

//rcpp_SurvExpInit
void SurvExpInit(SEXP poptable);
RcppExport SEXP missDeaths_rcpp_SurvExpInit(SEXP popSEXP) {
BEGIN_RCPP
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type poptable(popSEXP);

        SurvExpInit(poptable);
    }
    return R_NilValue;
END_RCPP
}

//rcpp_Sample
SEXP Sample(List params);
RcppExport SEXP missDeaths_rcpp_Sample(SEXP pSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List >::type params(pSEXP);

        DataFrame __result = Sample(params);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}

//rcpp_Resample
SEXP Resample(Rcpp::DataFrame data);
RcppExport SEXP missDeaths_rcpp_Resample(SEXP dSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< DataFrame >::type data(dSEXP);

        DataFrame __result = Resample(data);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}

//rcpp_BlindDeath
SEXP BlindDeath(Rcpp::DataFrame data, bool zombies);//, double interval);
RcppExport SEXP missDeaths_rcpp_BlindDeath(SEXP dSEXP, SEXP zSEXP/*, SEXP iSEXP*/) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< DataFrame >::type data(dSEXP);
        Rcpp::traits::input_parameter< bool >::type zombies(zSEXP);
        //Rcpp::traits::input_parameter< double >::type interval(iSEXP);

        DataFrame __result = BlindDeath(data, zombies);//, interval);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}


//rcpp_SimCensorX
SEXP SimCensorX(Rcpp::DataFrame data1, Rcpp::NumericVector maxtime1, Rcpp::CharacterVector form1, Rcpp::DataFrame D1, int maxiter);
RcppExport SEXP missDeaths_rcpp_SimCensorX(SEXP ddSEXP, SEXP mSEXP, SEXP fSEXP, SEXP dSEXP, SEXP iSEXP){
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< Rcpp::NumericVector >::type maxTime(mSEXP);
        Rcpp::traits::input_parameter< Rcpp::DataFrame >::type D(dSEXP);
        Rcpp::traits::input_parameter< Rcpp::DataFrame >::type data(ddSEXP);
        Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type form(fSEXP);
        Rcpp::traits::input_parameter< int >::type iter(iSEXP);

        SEXP __result = SimCensorX(data, maxTime, form, D, iter);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}

//rcpp_SurvTime
double SurvTime(int year, double age, double probability, int sex);
RcppExport SEXP missDeaths_rcpp_SurvTime(SEXP ySEXP, SEXP aSEXP, SEXP pSEXP, SEXP sSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< int >::type year(ySEXP );
        Rcpp::traits::input_parameter< double >::type age(aSEXP);
        Rcpp::traits::input_parameter< double >::type probability(pSEXP);
        Rcpp::traits::input_parameter< int >::type sex(sSEXP );
 
        double __result = SurvTime(year, age, probability, sex);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
